[
    {
        "type": "git",
        "cmd": "git config --global user.name '[firstname lastname]'",
        "desc": "set a name that is identifiable for credit when review version history"
    },
    {
        "type": "git",
        "cmd": "git config --global user.email “[valid-email]”",
        "desc": "set an email address that will be associated with each history marker"
    },
    {
        "type": "git",
        "cmd": "git config --global color.ui auto",
        "desc": "set automatic command line coloring for Git for easy reviewing"
    },
    {
        "type": "git",
        "cmd": "git init",
        "desc": "initialize an existing directory as a Git repository"
    },
    {
        "type": "git",
        "cmd": "git clone [url]",
        "desc": "retrieve an entire repository from a hosted location via URL"
    },
    {
        "type": "git",
        "cmd": "git status",
        "desc": "show modified files in working directory, staged for your next commit"
    },
    {
        "type": "git",
        "cmd": "git add [file]",
        "desc": "add a file as it looks now to your next commit (stage)"
    },
    {
        "type": "git",
        "cmd": "git reset [file]",
        "desc": "unstage a file while retaining the changes in working directory"
    },
    {
        "type": "git",
        "cmd": "git diff",
        "desc": "diff of what is changed but not staged"
    },
    {
        "type": "git",
        "cmd": "git diff --staged",
        "desc": "diff of what is staged but not yet commited"
    },
    {
        "type": "git",
        "cmd": "git commit -m “[descriptive message]”",
        "desc": "commit your staged content as a new commit snapshot"
    },
    {
        "type": "git",
        "cmd": "git branch",
        "desc": "list your branches. a * will appear next to the currently active branch"
    },
    {
        "type": "git",
        "cmd": "git branch [branch-name]",
        "desc": "create a new branch at the current commit"
    },
    {
        "type": "git",
        "cmd": "git checkout",
        "desc": "switch to another branch and check it out into your working directory"
    },
    {
        "type": "git",
        "cmd": "git merge [branch]",
        "desc": "merge the specified branch’s history into the current one"
    },
    {
        "type": "git",
        "cmd": "git log",
        "desc": "show all commits in the current branch’s history"
    },
    {
        "type": "git",
        "cmd": "git log",
        "desc": "show the commit history for the currently active branch"
    },
    {
        "type": "git",
        "cmd": "git log branchB..branchA",
        "desc": "show the commits on branchA that are not on branchB"
    },
    {
        "type": "git",
        "cmd": "git log --follow [file]",
        "desc": "show the commits that changed file, even across renames"
    },
    {
        "type": "git",
        "cmd": "git diff branchB...branchA",
        "desc": "show the diff of what is in branchA that is not in branchB"
    },
    {
        "type": "git",
        "cmd": "git show [SHA]",
        "desc": "show any object in Git in human-readable format"
    },
    {
        "type": "git",
        "cmd": "git rm [file]",
        "desc": "delete the file from project and stage the removal for commit"
    },
    {
        "type": "git",
        "cmd": "git mv [existing-path] [new-path]",
        "desc": "change an existing file path and stage the move"
    },
    {
        "type": "git",
        "cmd": "git log --stat -M",
        "desc": "show all commit logs with indication of any paths that moved"
    },
    {
        "type": "git",
        "cmd": "git remote add [alias] [url]",
        "desc": "add a git URL as an alias"
    },
    {
        "type": "git",
        "cmd": "git fetch [alias]",
        "desc": "fetch down all the branches from that Git remote"
    },
    {
        "type": "git",
        "cmd": "git merge [alias]/[branch]",
        "desc": "merge a remote branch into your current branch to bring it up to date"
    },
    {
        "type": "git",
        "cmd": "git push [alias] [branch]",
        "desc": "Transmit local branch commits to the remote repository branch"
    },
    {
        "type": "git",
        "cmd": "git pull",
        "desc": "fetch and merge any commits from the tracking remote branch"
    },
    {
        "type": "git",
        "cmd": "git rebase [branch]",
        "desc": "apply any commits of current branch ahead of specified one"
    },
    {
        "type": "git",
        "cmd": "git reset --hard [commit]",
        "desc": "clear staging area, rewrite working tree from specified commit"
    },
    {
        "type": "git",
        "cmd": "git stash",
        "desc": "Save modified and staged changes"
    },
    {
        "type": "git",
        "cmd": "git stash list",
        "desc": "list stack-order of stashed file changes"
    },
    {
        "type": "git",
        "cmd": "git stash pop",
        "desc": "write working from top of stash stack"
    },
    {
        "type": "git",
        "cmd": "git stash drop",
        "desc": "discard the changes from top of stash stack"
    },
    {
        "type": "bash",
        "cmd": "pwd",
        "desc": "show current directory"
    },
    {
        "type": "bash",
        "cmd": "mkdir folderName",
        "desc": "make a new folder called folderName"
    },
    {
        "type": "bash",
        "cmd": "cd folderName",
        "desc": "change to the folder called folderName"
    },
    {
        "type": "bash",
        "cmd": "cd ..",
        "desc": "change to the parent folder"
    },
    {
        "type": "bash",
        "cmd": "ls",
        "desc": "list files in the current folder"
    },
    {
        "type": "bash",
        "cmd": "ls folderName",
        "desc": "list files in the folder folderName"
    },
    {
        "type": "bash",
        "cmd": "ls -a",
        "desc": "list all files in the current folder"
    },
    {
        "type": "bash",
        "cmd": "ls -l",
        "desc": "list all files in the current folder with long listing format"
    },
    {
        "type": "bash",
        "cmd": "ls -1",
        "desc": "list files in the current folder showing one file per line"
    },
    {
        "type": "bash",
        "cmd": "code .",
        "desc": "open vscode in the current folder"
    }
]
